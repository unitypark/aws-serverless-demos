{"version":3,"names":["_core","require","_pluginSyntaxDecorators","_helperReplaceSupers","_helperSplitExportDeclaration","incrementId","id","idx","length","unshift","current","createPrivateUidGeneratorForClass","classPath","currentPrivateId","privateNames","Set","traverse","PrivateName","path","add","node","name","reifiedId","String","fromCharCode","has","t","privateName","identifier","createLazyPrivateUidGeneratorForClass","generator","replaceClassWithVar","type","varId","scope","generateUidIdentifierBasedOnNode","classId","rename","get","replaceWith","cloneNode","needsDeclaration","className","parent","generateDeclaredUidIdentifier","parentPath","newClassExpr","classExpression","superClass","body","newPath","sequenceExpression","generateClassProperty","key","value","isStatic","classPrivateProperty","undefined","classProperty","addProxyAccessorsFor","element","originalKey","targetKey","version","isComputed","static","thisArg","thisExpression","getterBody","blockStatement","returnStatement","memberExpression","setterBody","expressionStatement","assignmentExpression","getter","setter","classPrivateMethod","classMethod","insertAfter","extractProxyAccessorsFor","template","expression","ast","FIELD","ACCESSOR","METHOD","GETTER","SETTER","STATIC_OLD_VERSION","STATIC","DECORATORS_HAVE_THIS","getElementKind","kind","isDecoratorInfo","info","filteredOrderedDecoratorInfo","filtered","filter","el","generateDecorationList","decorators","decoratorsThis","decsCount","hasOneThis","some","Boolean","decs","i","push","unaryExpression","numericLiteral","hasThis","generateDecorationExprs","arrayExpression","map","flag","privateMethods","extractElementLocalAssignments","decorationInfo","localIds","locals","Array","isArray","addCallAccessorsFor","getId","setId","callExpression","isNotTsParameter","movePrivateAccessor","methodLocalVar","params","block","isClassDecoratableElementPath","staticBlockToIIFE","arrowFunctionExpression","maybeSequenceExpression","exprs","transformClass","state","constantSuper","classDecorators","hasElementDecorators","generateClassPrivateUid","computed","newId","valueNode","newField","elementDecoratorInfo","firstFieldPath","constructorPath","requiresProtoInit","requiresStaticInit","decoratedPrivateMethods","protoInitLocal","staticInitLocal","classInitLocal","classIdLocal","assignments","scopeParent","memoiseExpression","hint","localEvaluatedId","Map","maybeExtractDecorator","decorator","isMemberExpression","object","isSuper","isThisExpression","set","needsDeclaraionForClassBinding","classDecorator","generateUidIdentifier","lastInstancePrivateName","needsInstancePrivateBrandCheck","hasDecorators","decoratorPath","isPrivate","isClassPrivateProperty","isClassMethod","newFieldInitId","newValue","initId","valuePath","v","replaceSupers","ReplaceSupers","methodPath","objectRef","superRef","file","refToPreserve","replace","async","isAsync","functionExpression","remove","nameExpr","stringLiteral","d","elementDecorations","classDecorationsFlag","classDecorations","dec","elementLocals","protoInitCall","CallExpression","exit","skip","super","spreadElement","restElement","size","parentParentPath","left","buildCodeFrameError","classLocals","classInitInjected","classInitCall","originalClass","statics","staticBlocks","forEach","isStaticBlock","isProperty","isClassProperty","isClassPrivateMethod","allValues","staticsClass","addHelper","staticBlock","toStatement","constructorBody","newExpr","newExpression","arguments","maybeGenerateMemoised","createLocalsAssignment","insertBefore","expr","variableDeclaration","variableDeclarator","crawl","maybePrivateBranName","lhs","rhs","args","availableHelper","arrayPattern","objectPattern","objectProperty","_default","assertVersion","assumption","loose","_assumption","VISITED","WeakSet","inherits","syntaxDecorators","visitor","ExportNamedDeclaration|ExportDefaultDeclaration","_declaration$decorato","declaration","splitExportDeclaration","Class"],"sources":["../src/transformer-2023-05.ts"],"sourcesContent":["import type { NodePath, Scope } from \"@babel/traverse\";\nimport { types as t, template } from \"@babel/core\";\nimport syntaxDecorators from \"@babel/plugin-syntax-decorators\";\nimport ReplaceSupers from \"@babel/helper-replace-supers\";\nimport splitExportDeclaration from \"@babel/helper-split-export-declaration\";\nimport * as charCodes from \"charcodes\";\nimport type { PluginAPI, PluginObject, PluginPass } from \"@babel/core\";\nimport type { Options } from \"./index.ts\";\n\ntype ClassDecoratableElement =\n  | t.ClassMethod\n  | t.ClassPrivateMethod\n  | t.ClassProperty\n  | t.ClassPrivateProperty\n  | t.ClassAccessorProperty;\n\ntype ClassElement =\n  | ClassDecoratableElement\n  | t.TSDeclareMethod\n  | t.TSIndexSignature\n  | t.StaticBlock;\n\ntype DecoratorVersionKind = \"2023-05\" | \"2023-01\" | \"2022-03\" | \"2021-12\";\n\nfunction incrementId(id: number[], idx = id.length - 1): void {\n  // If index is -1, id needs an additional character, unshift A\n  if (idx === -1) {\n    id.unshift(charCodes.uppercaseA);\n    return;\n  }\n\n  const current = id[idx];\n\n  if (current === charCodes.uppercaseZ) {\n    // if current is Z, skip to a\n    id[idx] = charCodes.lowercaseA;\n  } else if (current === charCodes.lowercaseZ) {\n    // if current is z, reset to A and carry the 1\n    id[idx] = charCodes.uppercaseA;\n    incrementId(id, idx - 1);\n  } else {\n    // else, increment by one\n    id[idx] = current + 1;\n  }\n}\n\n/**\n * Generates a new private name that is unique to the given class. This can be\n * used to create extra class fields and methods for the implementation, while\n * keeping the length of those names as small as possible. This is important for\n * minification purposes (though private names can generally be minified,\n * transpilations and polyfills cannot yet).\n */\nfunction createPrivateUidGeneratorForClass(\n  classPath: NodePath<t.ClassDeclaration | t.ClassExpression>,\n): () => t.PrivateName {\n  const currentPrivateId: number[] = [];\n  const privateNames = new Set<string>();\n\n  classPath.traverse({\n    PrivateName(path) {\n      privateNames.add(path.node.id.name);\n    },\n  });\n\n  return (): t.PrivateName => {\n    let reifiedId;\n    do {\n      incrementId(currentPrivateId);\n      reifiedId = String.fromCharCode(...currentPrivateId);\n    } while (privateNames.has(reifiedId));\n\n    return t.privateName(t.identifier(reifiedId));\n  };\n}\n\n/**\n * Wraps the above generator function so that it's run lazily the first time\n * it's actually required. Several types of decoration do not require this, so it\n * saves iterating the class elements an additional time and allocating the space\n * for the Sets of element names.\n */\nfunction createLazyPrivateUidGeneratorForClass(\n  classPath: NodePath<t.ClassDeclaration | t.ClassExpression>,\n): () => t.PrivateName {\n  let generator: () => t.PrivateName;\n\n  return (): t.PrivateName => {\n    if (!generator) {\n      generator = createPrivateUidGeneratorForClass(classPath);\n    }\n\n    return generator();\n  };\n}\n\n/**\n * Takes a class definition and replaces it with an equivalent class declaration\n * which is then assigned to a local variable. This allows us to reassign the\n * local variable with the decorated version of the class. The class definition\n * retains its original name so that `toString` is not affected, other\n * references to the class are renamed instead.\n */\nfunction replaceClassWithVar(\n  path: NodePath<t.ClassDeclaration | t.ClassExpression>,\n): {\n  id: t.Identifier;\n  path: NodePath<t.ClassDeclaration | t.ClassExpression>;\n  needsDeclaration: boolean;\n} {\n  if (path.type === \"ClassDeclaration\") {\n    const varId = path.scope.generateUidIdentifierBasedOnNode(path.node.id);\n    const classId = t.identifier(path.node.id.name);\n\n    path.scope.rename(classId.name, varId.name);\n\n    path.get(\"id\").replaceWith(classId);\n\n    return { id: t.cloneNode(varId), path, needsDeclaration: true };\n  } else {\n    let className: string;\n    let varId: t.Identifier;\n\n    if (path.node.id) {\n      className = path.node.id.name;\n      varId = path.scope.parent.generateDeclaredUidIdentifier(className);\n      path.scope.rename(className, varId.name);\n    } else if (\n      path.parentPath.node.type === \"VariableDeclarator\" &&\n      path.parentPath.node.id.type === \"Identifier\"\n    ) {\n      className = path.parentPath.node.id.name;\n      varId = path.scope.parent.generateDeclaredUidIdentifier(className);\n    } else {\n      varId =\n        path.scope.parent.generateDeclaredUidIdentifier(\"decorated_class\");\n    }\n\n    const newClassExpr = t.classExpression(\n      className && t.identifier(className),\n      path.node.superClass,\n      path.node.body,\n    );\n\n    const [newPath] = path.replaceWith(\n      t.sequenceExpression([newClassExpr, varId]),\n    );\n\n    return {\n      id: t.cloneNode(varId),\n      path: newPath.get(\"expressions.0\") as NodePath<t.ClassExpression>,\n      needsDeclaration: false,\n    };\n  }\n}\n\nfunction generateClassProperty(\n  key: t.PrivateName | t.Identifier,\n  value: t.Expression | undefined,\n  isStatic: boolean,\n): t.ClassPrivateProperty | t.ClassProperty {\n  if (key.type === \"PrivateName\") {\n    return t.classPrivateProperty(key, value, undefined, isStatic);\n  } else {\n    return t.classProperty(key, value, undefined, undefined, isStatic);\n  }\n}\n\nfunction addProxyAccessorsFor(\n  className: t.Identifier,\n  element: NodePath<ClassDecoratableElement>,\n  originalKey: t.PrivateName | t.Expression,\n  targetKey: t.PrivateName,\n  version: DecoratorVersionKind,\n  isComputed = false,\n): void {\n  const { static: isStatic } = element.node;\n\n  const thisArg =\n    version === \"2023-05\" && isStatic ? className : t.thisExpression();\n\n  const getterBody = t.blockStatement([\n    t.returnStatement(\n      t.memberExpression(t.cloneNode(thisArg), t.cloneNode(targetKey)),\n    ),\n  ]);\n\n  const setterBody = t.blockStatement([\n    t.expressionStatement(\n      t.assignmentExpression(\n        \"=\",\n        t.memberExpression(t.cloneNode(thisArg), t.cloneNode(targetKey)),\n        t.identifier(\"v\"),\n      ),\n    ),\n  ]);\n\n  let getter: t.ClassMethod | t.ClassPrivateMethod,\n    setter: t.ClassMethod | t.ClassPrivateMethod;\n\n  if (originalKey.type === \"PrivateName\") {\n    getter = t.classPrivateMethod(\n      \"get\",\n      t.cloneNode(originalKey),\n      [],\n      getterBody,\n      isStatic,\n    );\n    setter = t.classPrivateMethod(\n      \"set\",\n      t.cloneNode(originalKey),\n      [t.identifier(\"v\")],\n      setterBody,\n      isStatic,\n    );\n  } else {\n    getter = t.classMethod(\n      \"get\",\n      t.cloneNode(originalKey),\n      [],\n      getterBody,\n      isComputed,\n      isStatic,\n    );\n    setter = t.classMethod(\n      \"set\",\n      t.cloneNode(originalKey),\n      [t.identifier(\"v\")],\n      setterBody,\n      isComputed,\n      isStatic,\n    );\n  }\n\n  element.insertAfter(setter);\n  element.insertAfter(getter);\n}\n\nfunction extractProxyAccessorsFor(\n  targetKey: t.PrivateName,\n  version: DecoratorVersionKind,\n): (t.FunctionExpression | t.ArrowFunctionExpression)[] {\n  if (version !== \"2023-05\" && version !== \"2023-01\") {\n    return [\n      template.expression.ast`\n        function () {\n          return this.${t.cloneNode(targetKey)};\n        }\n      ` as t.FunctionExpression,\n      template.expression.ast`\n        function (value) {\n          this.${t.cloneNode(targetKey)} = value;\n        }\n      ` as t.FunctionExpression,\n    ];\n  }\n  return [\n    template.expression.ast`\n      o => o.${t.cloneNode(targetKey)}\n    ` as t.ArrowFunctionExpression,\n    template.expression.ast`\n      (o, v) => o.${t.cloneNode(targetKey)} = v\n    ` as t.ArrowFunctionExpression,\n  ];\n}\n\n// 3 bits reserved to this (0-7)\nconst FIELD = 0;\nconst ACCESSOR = 1;\nconst METHOD = 2;\nconst GETTER = 3;\nconst SETTER = 4;\n\nconst STATIC_OLD_VERSION = 5; // Before 2023-05\nconst STATIC = 8; // 1 << 3\nconst DECORATORS_HAVE_THIS = 16; // 1 << 3\n\nfunction getElementKind(element: NodePath<ClassDecoratableElement>): number {\n  switch (element.node.type) {\n    case \"ClassProperty\":\n    case \"ClassPrivateProperty\":\n      return FIELD;\n    case \"ClassAccessorProperty\":\n      return ACCESSOR;\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n      if (element.node.kind === \"get\") {\n        return GETTER;\n      } else if (element.node.kind === \"set\") {\n        return SETTER;\n      } else {\n        return METHOD;\n      }\n  }\n}\n\n// Information about the decorators applied to an element\ninterface DecoratorInfo {\n  // The expressions of the decorators themselves\n  decorators: t.Expression[];\n  decoratorsThis: t.Expression[];\n\n  // The kind of the decorated value, matches the kind value passed to applyDecs\n  kind: number;\n\n  // whether or not the field is static\n  isStatic: boolean;\n\n  // The name of the decorator\n  name: t.StringLiteral | t.Expression;\n\n  privateMethods:\n    | (t.FunctionExpression | t.ArrowFunctionExpression)[]\n    | undefined;\n\n  // The names of local variables that will be used/returned from the decoration\n  locals: t.Identifier | t.Identifier[] | undefined;\n}\n\n// Information about a computed property key. These must be evaluated\n// interspersed with decorator expressions, which is why they get added to the\n// array of DecoratorInfos later on.\ninterface ComputedPropInfo {\n  localComputedNameId: t.Identifier;\n  keyNode: t.Expression;\n}\n\nfunction isDecoratorInfo(\n  info: DecoratorInfo | ComputedPropInfo,\n): info is DecoratorInfo {\n  return \"decorators\" in info;\n}\n\nfunction filteredOrderedDecoratorInfo(\n  info: (DecoratorInfo | ComputedPropInfo)[],\n): DecoratorInfo[] {\n  const filtered = info.filter(isDecoratorInfo);\n\n  return [\n    ...filtered.filter(\n      el => el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER,\n    ),\n    ...filtered.filter(\n      el => !el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER,\n    ),\n    ...filtered.filter(el => el.isStatic && el.kind === FIELD),\n    ...filtered.filter(el => !el.isStatic && el.kind === FIELD),\n  ];\n}\n\nfunction generateDecorationList(\n  decorators: t.Expression[],\n  decoratorsThis: (t.Expression | null)[],\n  version: DecoratorVersionKind,\n) {\n  const decsCount = decorators.length;\n  const hasOneThis = decoratorsThis.some(Boolean);\n  const decs: t.Expression[] = [];\n  for (let i = 0; i < decsCount; i++) {\n    if (version === \"2023-05\" && hasOneThis) {\n      decs.push(\n        decoratorsThis[i] || t.unaryExpression(\"void\", t.numericLiteral(0)),\n      );\n    }\n    decs.push(decorators[i]);\n  }\n\n  return { hasThis: hasOneThis, decs };\n}\n\nfunction generateDecorationExprs(\n  info: (DecoratorInfo | ComputedPropInfo)[],\n  version: DecoratorVersionKind,\n): t.ArrayExpression {\n  return t.arrayExpression(\n    filteredOrderedDecoratorInfo(info).map(el => {\n      const { decs, hasThis } = generateDecorationList(\n        el.decorators,\n        el.decoratorsThis,\n        version,\n      );\n\n      let flag = el.kind;\n      if (el.isStatic) {\n        flag += version === \"2023-05\" ? STATIC : STATIC_OLD_VERSION;\n      }\n      if (hasThis) flag += DECORATORS_HAVE_THIS;\n\n      return t.arrayExpression([\n        decs.length === 1 ? decs[0] : t.arrayExpression(decs),\n        t.numericLiteral(flag),\n        el.name,\n        ...(el.privateMethods || []),\n      ]);\n    }),\n  );\n}\n\nfunction extractElementLocalAssignments(\n  decorationInfo: (DecoratorInfo | ComputedPropInfo)[],\n) {\n  const localIds: t.Identifier[] = [];\n\n  for (const el of filteredOrderedDecoratorInfo(decorationInfo)) {\n    const { locals } = el;\n\n    if (Array.isArray(locals)) {\n      localIds.push(...locals);\n    } else if (locals !== undefined) {\n      localIds.push(locals);\n    }\n  }\n\n  return localIds;\n}\n\nfunction addCallAccessorsFor(\n  element: NodePath,\n  key: t.PrivateName,\n  getId: t.Identifier,\n  setId: t.Identifier,\n) {\n  element.insertAfter(\n    t.classPrivateMethod(\n      \"get\",\n      t.cloneNode(key),\n      [],\n      t.blockStatement([\n        t.returnStatement(\n          t.callExpression(t.cloneNode(getId), [t.thisExpression()]),\n        ),\n      ]),\n    ),\n  );\n\n  element.insertAfter(\n    t.classPrivateMethod(\n      \"set\",\n      t.cloneNode(key),\n      [t.identifier(\"v\")],\n      t.blockStatement([\n        t.expressionStatement(\n          t.callExpression(t.cloneNode(setId), [\n            t.thisExpression(),\n            t.identifier(\"v\"),\n          ]),\n        ),\n      ]),\n    ),\n  );\n}\n\nfunction isNotTsParameter(\n  node: t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty,\n): node is t.Identifier | t.Pattern | t.RestElement {\n  return node.type !== \"TSParameterProperty\";\n}\n\nfunction movePrivateAccessor(\n  element: NodePath<t.ClassPrivateMethod>,\n  key: t.PrivateName,\n  methodLocalVar: t.Identifier,\n  isStatic: boolean,\n) {\n  let params: (t.Identifier | t.RestElement)[];\n  let block: t.Statement[];\n\n  if (element.node.kind === \"set\") {\n    params = [t.identifier(\"v\")];\n    block = [\n      t.expressionStatement(\n        t.callExpression(methodLocalVar, [\n          t.thisExpression(),\n          t.identifier(\"v\"),\n        ]),\n      ),\n    ];\n  } else {\n    params = [];\n    block = [\n      t.returnStatement(t.callExpression(methodLocalVar, [t.thisExpression()])),\n    ];\n  }\n\n  element.replaceWith(\n    t.classPrivateMethod(\n      element.node.kind,\n      t.cloneNode(key),\n      params,\n      t.blockStatement(block),\n      isStatic,\n    ),\n  );\n}\n\nfunction isClassDecoratableElementPath(\n  path: NodePath<ClassElement>,\n): path is NodePath<ClassDecoratableElement> {\n  const { type } = path;\n\n  return (\n    type !== \"TSDeclareMethod\" &&\n    type !== \"TSIndexSignature\" &&\n    type !== \"StaticBlock\"\n  );\n}\n\nfunction staticBlockToIIFE(block: t.StaticBlock) {\n  return t.callExpression(\n    t.arrowFunctionExpression([], t.blockStatement(block.body)),\n    [],\n  );\n}\n\nfunction maybeSequenceExpression(exprs: t.Expression[]) {\n  if (exprs.length === 0) return t.unaryExpression(\"void\", t.numericLiteral(0));\n  if (exprs.length === 1) return exprs[0];\n  return t.sequenceExpression(exprs);\n}\n\nfunction transformClass(\n  path: NodePath<t.ClassExpression | t.ClassDeclaration>,\n  state: PluginPass,\n  constantSuper: boolean,\n  version: DecoratorVersionKind,\n): NodePath {\n  const body = path.get(\"body.body\");\n\n  const classDecorators = path.node.decorators;\n  let hasElementDecorators = false;\n\n  const generateClassPrivateUid = createLazyPrivateUidGeneratorForClass(path);\n\n  // Iterate over the class to see if we need to decorate it, and also to\n  // transform simple auto accessors which are not decorated\n  for (const element of body) {\n    if (!isClassDecoratableElementPath(element)) {\n      continue;\n    }\n\n    if (element.node.decorators && element.node.decorators.length > 0) {\n      hasElementDecorators = true;\n    } else if (element.node.type === \"ClassAccessorProperty\") {\n      const { key, value, static: isStatic, computed } = element.node;\n\n      const newId = generateClassPrivateUid();\n\n      const valueNode = value ? t.cloneNode(value) : undefined;\n\n      const newField = generateClassProperty(newId, valueNode, isStatic);\n\n      const [newPath] = element.replaceWith(newField);\n      addProxyAccessorsFor(\n        path.node.id,\n        newPath,\n        key,\n        newId,\n        version,\n        computed,\n      );\n    }\n  }\n\n  // If nothing is decorated, return\n  if (!classDecorators && !hasElementDecorators) return;\n\n  const elementDecoratorInfo: (DecoratorInfo | ComputedPropInfo)[] = [];\n\n  // The initializer of the first non-static field will be injected with the protoInit call\n  let firstFieldPath:\n    | NodePath<t.ClassProperty | t.ClassPrivateProperty>\n    | undefined;\n  let constructorPath: NodePath<t.ClassMethod> | undefined;\n  let requiresProtoInit = false;\n  let requiresStaticInit = false;\n  const decoratedPrivateMethods = new Set<string>();\n\n  let protoInitLocal: t.Identifier,\n    staticInitLocal: t.Identifier,\n    classInitLocal: t.Identifier,\n    classIdLocal: t.Identifier;\n  const assignments: t.AssignmentExpression[] = [];\n  const scopeParent: Scope = path.scope.parent;\n\n  const memoiseExpression = (expression: t.Expression, hint: string) => {\n    const localEvaluatedId = scopeParent.generateDeclaredUidIdentifier(hint);\n    assignments.push(t.assignmentExpression(\"=\", localEvaluatedId, expression));\n    return t.cloneNode(localEvaluatedId);\n  };\n\n  const decoratorsThis = new Map<t.Decorator, t.Expression>();\n  const maybeExtractDecorator = (decorator: t.Decorator) => {\n    const { expression } = decorator;\n    if (version === \"2023-05\" && t.isMemberExpression(expression)) {\n      let object;\n      if (\n        t.isSuper(expression.object) ||\n        t.isThisExpression(expression.object)\n      ) {\n        object = memoiseExpression(t.thisExpression(), \"obj\");\n      } else if (!scopeParent.isStatic(expression.object)) {\n        object = memoiseExpression(expression.object, \"obj\");\n        expression.object = object;\n      } else {\n        object = expression.object;\n      }\n      decoratorsThis.set(decorator, t.cloneNode(object));\n    }\n    if (!scopeParent.isStatic(expression)) {\n      decorator.expression = memoiseExpression(expression, \"dec\");\n    }\n  };\n\n  let needsDeclaraionForClassBinding = false;\n  if (classDecorators) {\n    classInitLocal = scopeParent.generateDeclaredUidIdentifier(\"initClass\");\n\n    ({\n      id: classIdLocal,\n      path,\n      needsDeclaration: needsDeclaraionForClassBinding,\n    } = replaceClassWithVar(path));\n\n    path.node.decorators = null;\n\n    for (const classDecorator of classDecorators) {\n      maybeExtractDecorator(classDecorator);\n    }\n  } else {\n    if (!path.node.id) {\n      path.node.id = path.scope.generateUidIdentifier(\"Class\");\n    }\n    classIdLocal = t.cloneNode(path.node.id);\n  }\n\n  let lastInstancePrivateName: t.PrivateName;\n  let needsInstancePrivateBrandCheck = false;\n\n  if (hasElementDecorators) {\n    for (const element of body) {\n      if (!isClassDecoratableElementPath(element)) {\n        continue;\n      }\n\n      const { node } = element;\n      const decorators = element.get(\"decorators\");\n\n      const hasDecorators = Array.isArray(decorators) && decorators.length > 0;\n\n      if (hasDecorators) {\n        for (const decoratorPath of decorators) {\n          maybeExtractDecorator(decoratorPath.node);\n        }\n      }\n\n      const isComputed =\n        \"computed\" in element.node && element.node.computed === true;\n      if (isComputed) {\n        if (!scopeParent.isStatic(node.key)) {\n          node.key = memoiseExpression(node.key as t.Expression, \"computedKey\");\n        }\n      }\n\n      const kind = getElementKind(element);\n      const { key } = node;\n\n      const isPrivate = key.type === \"PrivateName\";\n\n      const isStatic = !!element.node.static;\n\n      let name = \"computedKey\";\n\n      if (isPrivate) {\n        name = key.id.name;\n      } else if (!isComputed && key.type === \"Identifier\") {\n        name = key.name;\n      }\n\n      if (isPrivate && !isStatic) {\n        if (hasDecorators) {\n          needsInstancePrivateBrandCheck = true;\n        }\n        if (t.isClassPrivateProperty(node) || !lastInstancePrivateName) {\n          lastInstancePrivateName = key;\n        }\n      }\n\n      if (element.isClassMethod({ kind: \"constructor\" })) {\n        constructorPath = element;\n      }\n\n      if (hasDecorators) {\n        let locals: t.Identifier | t.Identifier[];\n        let privateMethods: Array<\n          t.FunctionExpression | t.ArrowFunctionExpression\n        >;\n\n        if (kind === ACCESSOR) {\n          const { value } = element.node as t.ClassAccessorProperty;\n\n          const params: t.Expression[] = [t.thisExpression()];\n\n          if (value) {\n            params.push(t.cloneNode(value));\n          }\n\n          const newId = generateClassPrivateUid();\n          const newFieldInitId =\n            element.scope.parent.generateDeclaredUidIdentifier(`init_${name}`);\n          const newValue = t.callExpression(\n            t.cloneNode(newFieldInitId),\n            params,\n          );\n\n          const newField = generateClassProperty(newId, newValue, isStatic);\n          const [newPath] = element.replaceWith(newField);\n\n          if (isPrivate) {\n            privateMethods = extractProxyAccessorsFor(newId, version);\n\n            const getId = newPath.scope.parent.generateDeclaredUidIdentifier(\n              `get_${name}`,\n            );\n            const setId = newPath.scope.parent.generateDeclaredUidIdentifier(\n              `set_${name}`,\n            );\n\n            addCallAccessorsFor(newPath, key, getId, setId);\n\n            locals = [newFieldInitId, getId, setId];\n          } else {\n            addProxyAccessorsFor(\n              path.node.id,\n              newPath,\n              key,\n              newId,\n              version,\n              isComputed,\n            );\n            locals = newFieldInitId;\n          }\n        } else if (kind === FIELD) {\n          const initId = element.scope.parent.generateDeclaredUidIdentifier(\n            `init_${name}`,\n          );\n          const valuePath = (\n            element as NodePath<t.ClassProperty | t.ClassPrivateProperty>\n          ).get(\"value\");\n\n          valuePath.replaceWith(\n            t.callExpression(\n              t.cloneNode(initId),\n              [t.thisExpression(), valuePath.node].filter(v => v),\n            ),\n          );\n\n          locals = initId;\n\n          if (isPrivate) {\n            privateMethods = extractProxyAccessorsFor(key, version);\n          }\n        } else if (isPrivate) {\n          locals = element.scope.parent.generateDeclaredUidIdentifier(\n            `call_${name}`,\n          );\n\n          const replaceSupers = new ReplaceSupers({\n            constantSuper,\n            methodPath: element as NodePath<t.ClassPrivateMethod>,\n            objectRef: classIdLocal,\n            superRef: path.node.superClass,\n            file: state.file,\n            refToPreserve: classIdLocal,\n          });\n\n          replaceSupers.replace();\n\n          const {\n            params,\n            body,\n            async: isAsync,\n          } = element.node as t.ClassPrivateMethod;\n\n          privateMethods = [\n            t.functionExpression(\n              undefined,\n              params.filter(isNotTsParameter),\n              body,\n              isAsync,\n            ),\n          ];\n\n          if (kind === GETTER || kind === SETTER) {\n            movePrivateAccessor(\n              element as NodePath<t.ClassPrivateMethod>,\n              t.cloneNode(key),\n              t.cloneNode(locals),\n              isStatic,\n            );\n          } else {\n            const node = element.node as t.ClassPrivateMethod;\n\n            // Unshift\n            path.node.body.body.unshift(\n              t.classPrivateProperty(key, t.cloneNode(locals), [], node.static),\n            );\n\n            decoratedPrivateMethods.add(key.id.name);\n\n            element.remove();\n          }\n        }\n\n        let nameExpr: t.Expression;\n\n        if (isComputed) {\n          nameExpr = t.cloneNode(key as t.Expression);\n        } else if (key.type === \"PrivateName\") {\n          nameExpr = t.stringLiteral(key.id.name);\n        } else if (key.type === \"Identifier\") {\n          nameExpr = t.stringLiteral(key.name);\n        } else {\n          nameExpr = t.cloneNode(key as t.Expression);\n        }\n\n        elementDecoratorInfo.push({\n          kind,\n          decorators: decorators.map(d => d.node.expression),\n          decoratorsThis: decorators.map(d => decoratorsThis.get(d.node)),\n          name: nameExpr,\n          isStatic,\n          privateMethods,\n          locals,\n        });\n\n        if (kind !== FIELD) {\n          if (isStatic) {\n            requiresStaticInit = true;\n          } else {\n            requiresProtoInit = true;\n          }\n        }\n\n        if (element.node) {\n          element.node.decorators = null;\n        }\n\n        if (\n          !firstFieldPath &&\n          !isStatic &&\n          (kind === FIELD || kind === ACCESSOR)\n        ) {\n          firstFieldPath = element as NodePath<\n            t.ClassProperty | t.ClassPrivateProperty\n          >;\n        }\n      }\n    }\n  }\n\n  const elementDecorations = generateDecorationExprs(\n    elementDecoratorInfo,\n    version,\n  );\n  let classDecorationsFlag = 0;\n  let classDecorations: t.Expression[] = [];\n  if (classDecorators) {\n    const { hasThis, decs } = generateDecorationList(\n      classDecorators.map(el => el.expression),\n      classDecorators.map(dec => decoratorsThis.get(dec)),\n      version,\n    );\n    classDecorationsFlag = hasThis ? 1 : 0;\n    classDecorations = decs;\n  }\n\n  const elementLocals: t.Identifier[] =\n    extractElementLocalAssignments(elementDecoratorInfo);\n\n  if (requiresProtoInit) {\n    protoInitLocal = scopeParent.generateDeclaredUidIdentifier(\"initProto\");\n    elementLocals.push(protoInitLocal);\n\n    const protoInitCall = t.callExpression(t.cloneNode(protoInitLocal), [\n      t.thisExpression(),\n    ]);\n\n    if (firstFieldPath) {\n      const value = firstFieldPath.get(\"value\");\n      const body: t.Expression[] = [protoInitCall];\n\n      if (value.node) {\n        body.push(value.node);\n      }\n\n      value.replaceWith(t.sequenceExpression(body));\n    } else if (constructorPath) {\n      if (path.node.superClass) {\n        path.traverse({\n          CallExpression: {\n            exit(path) {\n              if (!path.get(\"callee\").isSuper()) return;\n\n              path.replaceWith(\n                t.callExpression(t.cloneNode(protoInitLocal), [path.node]),\n              );\n\n              path.skip();\n            },\n          },\n        });\n      } else {\n        constructorPath.node.body.body.unshift(\n          t.expressionStatement(protoInitCall),\n        );\n      }\n    } else {\n      const body: t.Statement[] = [t.expressionStatement(protoInitCall)];\n\n      if (path.node.superClass) {\n        body.unshift(\n          t.expressionStatement(\n            t.callExpression(t.super(), [\n              t.spreadElement(t.identifier(\"args\")),\n            ]),\n          ),\n        );\n      }\n\n      path.node.body.body.unshift(\n        t.classMethod(\n          \"constructor\",\n          t.identifier(\"constructor\"),\n          [t.restElement(t.identifier(\"args\"))],\n          t.blockStatement(body),\n        ),\n      );\n    }\n  }\n\n  if (requiresStaticInit) {\n    staticInitLocal = scopeParent.generateDeclaredUidIdentifier(\"initStatic\");\n    elementLocals.push(staticInitLocal);\n  }\n\n  if (decoratedPrivateMethods.size > 0) {\n    path.traverse({\n      PrivateName(path) {\n        if (!decoratedPrivateMethods.has(path.node.id.name)) return;\n\n        const parentPath = path.parentPath;\n        const parentParentPath = parentPath.parentPath;\n\n        if (\n          // this.bar().#x = 123;\n          (parentParentPath.node.type === \"AssignmentExpression\" &&\n            parentParentPath.node.left === parentPath.node) ||\n          // this.#x++;\n          parentParentPath.node.type === \"UpdateExpression\" ||\n          // ([...this.#x] = foo);\n          parentParentPath.node.type === \"RestElement\" ||\n          // ([this.#x] = foo);\n          parentParentPath.node.type === \"ArrayPattern\" ||\n          // ({ a: this.#x } = bar);\n          (parentParentPath.node.type === \"ObjectProperty\" &&\n            parentParentPath.node.value === parentPath.node &&\n            parentParentPath.parentPath.type === \"ObjectPattern\") ||\n          // for (this.#x of []);\n          (parentParentPath.node.type === \"ForOfStatement\" &&\n            parentParentPath.node.left === parentPath.node)\n        ) {\n          throw path.buildCodeFrameError(\n            `Decorated private methods are not updatable, but \"#${path.node.id.name}\" is updated via this expression.`,\n          );\n        }\n      },\n    });\n  }\n\n  const classLocals: t.Identifier[] = [];\n  let classInitInjected = false;\n  const classInitCall =\n    classInitLocal && t.callExpression(t.cloneNode(classInitLocal), []);\n\n  const originalClass = path.node;\n\n  if (classDecorators) {\n    classLocals.push(classIdLocal, classInitLocal);\n    const statics: (\n      | t.ClassProperty\n      | t.ClassPrivateProperty\n      | t.ClassPrivateMethod\n    )[] = [];\n    let staticBlocks: t.StaticBlock[] = [];\n    path.get(\"body.body\").forEach(element => {\n      // Static blocks cannot be compiled to \"instance blocks\", but we can inline\n      // them as IIFEs in the next property.\n      if (element.isStaticBlock()) {\n        staticBlocks.push(element.node);\n        element.remove();\n        return;\n      }\n\n      const isProperty =\n        element.isClassProperty() || element.isClassPrivateProperty();\n\n      if (\n        (isProperty || element.isClassPrivateMethod()) &&\n        element.node.static\n      ) {\n        if (isProperty && staticBlocks.length > 0) {\n          const allValues: t.Expression[] = staticBlocks.map(staticBlockToIIFE);\n          if (element.node.value) allValues.push(element.node.value);\n          element.node.value = maybeSequenceExpression(allValues);\n          staticBlocks = [];\n        }\n\n        element.node.static = false;\n        statics.push(element.node);\n        element.remove();\n      }\n    });\n\n    if (statics.length > 0 || staticBlocks.length > 0) {\n      const staticsClass = template.expression.ast`\n        class extends ${state.addHelper(\"identity\")} {}\n      ` as t.ClassExpression;\n      staticsClass.body.body = [\n        t.staticBlock([\n          t.toStatement(originalClass, true) ||\n            // If toStatement returns false, originalClass must be an anonymous ClassExpression,\n            // because `export default @dec ...` has been handled in the export visitor before.\n            t.expressionStatement(originalClass as t.ClassExpression),\n        ]),\n        ...statics,\n      ];\n\n      const constructorBody: t.Expression[] = [];\n\n      const newExpr = t.newExpression(staticsClass, []);\n\n      if (staticBlocks.length > 0) {\n        constructorBody.push(...staticBlocks.map(staticBlockToIIFE));\n      }\n      if (classInitCall) {\n        classInitInjected = true;\n        constructorBody.push(classInitCall);\n      }\n      if (constructorBody.length > 0) {\n        constructorBody.unshift(\n          t.callExpression(t.super(), [t.cloneNode(classIdLocal)]),\n        );\n\n        staticsClass.body.body.push(\n          t.classMethod(\n            \"constructor\",\n            t.identifier(\"constructor\"),\n            [],\n            t.blockStatement([\n              t.expressionStatement(t.sequenceExpression(constructorBody)),\n            ]),\n          ),\n        );\n      } else {\n        newExpr.arguments.push(t.cloneNode(classIdLocal));\n      }\n\n      path.replaceWith(newExpr);\n    }\n  }\n  if (!classInitInjected && classInitCall) {\n    path.node.body.body.push(\n      t.staticBlock([t.expressionStatement(classInitCall)]),\n    );\n  }\n\n  let { superClass } = originalClass;\n  if (superClass && (process.env.BABEL_8_BREAKING || version === \"2023-05\")) {\n    const id = path.scope.maybeGenerateMemoised(superClass);\n    if (id) {\n      originalClass.superClass = t.assignmentExpression(\"=\", id, superClass);\n      superClass = id;\n    }\n  }\n\n  originalClass.body.body.unshift(\n    t.staticBlock(\n      [\n        t.expressionStatement(\n          createLocalsAssignment(\n            elementLocals,\n            classLocals,\n            elementDecorations,\n            t.arrayExpression(classDecorations),\n            t.numericLiteral(classDecorationsFlag),\n            needsInstancePrivateBrandCheck ? lastInstancePrivateName : null,\n            t.cloneNode(superClass),\n            state,\n            version,\n          ),\n        ),\n        requiresStaticInit &&\n          t.expressionStatement(\n            t.callExpression(t.cloneNode(staticInitLocal), [\n              t.thisExpression(),\n            ]),\n          ),\n      ].filter(Boolean),\n    ),\n  );\n\n  // When path is a ClassExpression, path.insertBefore will convert `path`\n  // into a SequenceExpression\n  path.insertBefore(assignments.map(expr => t.expressionStatement(expr)));\n\n  if (needsDeclaraionForClassBinding) {\n    path.insertBefore(\n      t.variableDeclaration(\"let\", [\n        t.variableDeclarator(t.cloneNode(classIdLocal)),\n      ]),\n    );\n  }\n\n  // Recrawl the scope to make sure new identifiers are properly synced\n  path.scope.crawl();\n\n  return path;\n}\n\nfunction createLocalsAssignment(\n  elementLocals: t.Identifier[],\n  classLocals: t.Identifier[],\n  elementDecorations: t.ArrayExpression,\n  classDecorations: t.ArrayExpression,\n  classDecorationsFlag: t.NumericLiteral,\n  maybePrivateBranName: t.PrivateName | null,\n  superClass: null | t.Expression,\n  state: PluginPass,\n  version: DecoratorVersionKind,\n) {\n  let lhs, rhs;\n  const args: t.Expression[] = [\n    t.thisExpression(),\n    elementDecorations,\n    classDecorations,\n  ];\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (\n      version === \"2021-12\" ||\n      (version === \"2022-03\" && !state.availableHelper(\"applyDecs2203R\"))\n    ) {\n      const lhs = t.arrayPattern([...elementLocals, ...classLocals]);\n      const rhs = t.callExpression(\n        state.addHelper(version === \"2021-12\" ? \"applyDecs\" : \"applyDecs2203\"),\n        args,\n      );\n      return t.assignmentExpression(\"=\", lhs, rhs);\n    }\n  }\n\n  if (process.env.BABEL_8_BREAKING || version === \"2023-05\") {\n    if (\n      maybePrivateBranName ||\n      superClass ||\n      classDecorationsFlag.value !== 0\n    ) {\n      args.push(classDecorationsFlag);\n    }\n    if (maybePrivateBranName) {\n      args.push(\n        template.expression.ast`\n            _ => ${t.cloneNode(maybePrivateBranName)} in _\n          ` as t.ArrowFunctionExpression,\n      );\n    } else if (superClass) {\n      args.push(t.unaryExpression(\"void\", t.numericLiteral(0)));\n    }\n    if (superClass) args.push(superClass);\n    rhs = t.callExpression(state.addHelper(\"applyDecs2305\"), args);\n  } else if (version === \"2023-01\") {\n    if (maybePrivateBranName) {\n      args.push(\n        template.expression.ast`\n            _ => ${t.cloneNode(maybePrivateBranName)} in _\n          ` as t.ArrowFunctionExpression,\n      );\n    }\n    rhs = t.callExpression(state.addHelper(\"applyDecs2301\"), args);\n  } else {\n    rhs = t.callExpression(state.addHelper(\"applyDecs2203R\"), args);\n  }\n  // optimize `{ c: [classLocals] } = applyapplyDecs2203R(...)` to\n  // `[classLocals] = applyapplyDecs2203R(...).c`\n  if (elementLocals.length > 0) {\n    if (classLocals.length > 0) {\n      lhs = t.objectPattern([\n        t.objectProperty(t.identifier(\"e\"), t.arrayPattern(elementLocals)),\n        t.objectProperty(t.identifier(\"c\"), t.arrayPattern(classLocals)),\n      ]);\n    } else {\n      lhs = t.arrayPattern(elementLocals);\n      rhs = t.memberExpression(rhs, t.identifier(\"e\"), false, false);\n    }\n  } else {\n    // invariant: classLocals.length > 0\n    lhs = t.arrayPattern(classLocals);\n    rhs = t.memberExpression(rhs, t.identifier(\"c\"), false, false);\n  }\n\n  return t.assignmentExpression(\"=\", lhs, rhs);\n}\n\nexport default function (\n  { assertVersion, assumption }: PluginAPI,\n  { loose }: Options,\n  // TODO(Babel 8): Only keep 2023-05\n  version: \"2023-05\" | \"2023-01\" | \"2022-03\" | \"2021-12\",\n): PluginObject {\n  if (process.env.BABEL_8_BREAKING) {\n    assertVersion(process.env.IS_PUBLISH ? PACKAGE_JSON.version : \"^7.21.0\");\n  } else {\n    if (version === \"2023-05\" || version === \"2023-01\") {\n      assertVersion(\"^7.21.0\");\n    } else if (version === \"2021-12\") {\n      assertVersion(\"^7.16.0\");\n    } else {\n      assertVersion(\"^7.19.0\");\n    }\n  }\n\n  const VISITED = new WeakSet<NodePath>();\n  const constantSuper = assumption(\"constantSuper\") ?? loose;\n\n  return {\n    name: \"proposal-decorators\",\n    inherits: syntaxDecorators,\n\n    visitor: {\n      \"ExportNamedDeclaration|ExportDefaultDeclaration\"(\n        path: NodePath<t.ExportNamedDeclaration | t.ExportDefaultDeclaration>,\n      ) {\n        const { declaration } = path.node;\n        if (\n          declaration?.type === \"ClassDeclaration\" &&\n          // When compiling class decorators we need to replace the class\n          // binding, so we must split it in two separate declarations.\n          declaration.decorators?.length > 0\n        ) {\n          splitExportDeclaration(path);\n        }\n      },\n\n      Class(path, state) {\n        if (VISITED.has(path)) return;\n\n        const newPath = transformClass(path, state, constantSuper, version);\n        if (newPath) VISITED.add(newPath);\n      },\n    },\n  };\n}\n"],"mappings":"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"}