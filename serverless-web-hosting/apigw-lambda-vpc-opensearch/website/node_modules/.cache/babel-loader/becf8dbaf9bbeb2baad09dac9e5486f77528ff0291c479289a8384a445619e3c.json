{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"MUI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: Unsupported `\".concat(color, \"` color.\\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\") : _formatMuiErrorMessage(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: unsupported `\".concat(colorSpace, \"` color space.\\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.\") : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? \"\".concat(val, \"%\") : val).join(' ');\n};\nexport const private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n  if (type.indexOf('color') !== -1) {\n    values = \"\".concat(colorSpace, \" \").concat(values.join(' '));\n  } else {\n    values = \"\".concat(values.join(', '));\n  }\n  return \"\".concat(type, \"(\").concat(values, \")\");\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return \"#\".concat(values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join(''));\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = function (n) {\n    let k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = \"/\".concat(value);\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color) {\n  let coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}","map":{"version":3,"names":["formatMuiErrorMessage","_formatMuiErrorMessage","clamp","value","min","arguments","length","undefined","max","process","env","NODE_ENV","console","error","concat","Math","hexToRgb","color","slice","re","RegExp","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","decomposeColor","type","charAt","marker","indexOf","substring","Error","values","colorSpace","split","shift","parseFloat","colorChannel","decomposedColor","val","idx","private_safeColorChannel","warning","warn","recomposeColor","i","rgbToHex","hslToRgb","h","s","l","a","f","k","rgb","push","getLuminance","Number","toFixed","getContrastRatio","foreground","background","lumA","lumB","alpha","private_safeAlpha","darken","coefficient","private_safeDarken","lighten","private_safeLighten","emphasize","private_safeEmphasize"],"sources":["/Users/junghwpark/Dev/Projects/AWS/aws-serverless-demos/serverless-web-hosting/apigw-lambda-vpc-opensearch/website/node_modules/@mui/system/esm/colorManipulator.js"],"sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexport const private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}