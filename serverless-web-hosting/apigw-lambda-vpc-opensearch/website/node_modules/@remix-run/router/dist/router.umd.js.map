{"version":3,"file":"router.umd.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction<Context = any> {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)(\\?)?/g, (_: string, paramName: string, isOptional) => {\n        params.push({ paramName, isOptional: isOptional != null });\n        return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else if (isPathRelative) {\n    let fromSegments = routePathnames[routePathnames.length - 1]\n      .replace(/^\\//, \"\")\n      .split(\"/\");\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // With relative=\"path\", each leading .. segment means \"go up one URL segment\"\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        fromSegments.pop();\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = \"/\" + fromSegments.join(\"/\");\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // With relative=\"route\" (the default), each leading .. segment means\n      // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n      // difference from how <a href> works and a major reason we call this a\n      // \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      flushSync,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    flushSync?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingError || null,\n          ...(pendingActionData ? { actionData: pendingActionData } : {}),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData\n            ? Object.keys(actionData).length === 0\n              ? { actionData: null }\n              : { actionData }\n            : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        updateFetcherState(key, getLoadingFetcher(submission));\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission,\n        });\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(\n          `${method}() call aborted: ${request.method} ${request.url}`\n        );\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(\n        `${method}() call aborted: ${request.method} ${request.url}`\n      );\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","fromSegments","toSegments","shift","routePathnameIndex","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","getLoadingNavigation","Request","handleLoaders","fetcherSubmission","getSubmittingNavigation","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp2","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_temp3","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","isRouteRequest","isStaticRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","handlerError","protocol","isSameBasename","queryRouteResponse","contentType","isDeferredData","_result$init","_result$init2","deferred","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","pathMatches","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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"}